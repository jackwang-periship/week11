;We must begin with the [uwsgi] section header. 
;All of our information will go beneath this header. 
;We are also going to use variables to make our configuration file more reusable. 
;After the header, set a variable called project with the name of your first project. 
;Add a variable called uid which holds your sudo username.
;
;We will also add a variable called base with the path to your user's home directory. 
;This will be constructed from the username we set using the %(variable_name) syntax. 
;This will be replaced by the value of the variable when the config is read:
[uwsgi]
project = week8
;comment out the following line if not use virtualenv
;ENV = p2d18
;MAKE SURE CHANGE 'jwang02' TO THE USER NAME OF YOUR ACCOUNT
uid = jwang02
base = /home/%(uid)

;We need to configure uWSGI so that it handles our project correctly. 
;We need to change into the root project directory by setting the chdir option. 
;We can combine the home directory and project name using the same variable syntax.
;In a similar way, we will indicate the virtual environment for our project. 
;By setting the module, we can indicate exactly how to interface with our project 
;(by importing the "application" callable from the wsgi.py file within our project directory). 
;The configuration of these items will look like this:
chdir = %(base)/workspace/%(project)
;comment out the following line if not use virtualenv
;home = %(base)/virtualenvs/%(ENV)
module = %(project).wsgi:application

;We want to create a master process with 5 workers. We can do this by adding this:
master = true
processes = 5

;Next we need to specify how uWSGI should listen for connections. 
;In our test of uWSGI, we used HTTP and a network port. 
;However, since we are going to be using Nginx as a reverse proxy, we have better options.
;Instead of using a network port, since all of the components are operating on a single server, 
;we can use a Unix socket. This is more secure and offers better performance. 
;This socket will not use HTTP, but instead will implement uWSGI's uwsgi protocol, 
;which is a fast binary protocol for designed for communicating with other servers. 
;Nginx can natively proxy using the uwsgi protocol, so this is our best choice.
;We will also modify the ownership and permissions of the socket because we will be giving 
;the web server write access. We'll set the vacuum option so that the socket file 
;will be automatically cleaned up when the service is stopped:
socket = /run/uwsgi/%(project).sock
chown-socket = %(uid):www-data
chmod-socket = 660
vacuum = true

;location of log files
;Then you will have to create the directory in your VPS 
;(not that you can create the directory in whatever path you want, 
;as long as it's the path that you have in the ini file):
;   sudo mkdir -p /var/log/uwsgi
;	sudo chown -R user:user /var/log/uwsgi
logto = /var/log/uwsgi/%n.log